<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-link:"Заголовок 1 Знак";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-right:0cm;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	font-size:18.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
h3
	{mso-style-link:"Заголовок 3 Знак";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:36.0pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:36.0pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Times New Roman","serif";
	font-weight:bold;}
span.1
	{mso-style-name:"Заголовок 1 Знак";
	mso-style-link:"Заголовок 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-link:"Заголовок 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=RU link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoNormal align=center style='text-align:center;line-height:normal'><b><span
style='font-size:18.0pt'>Автоматизированное тестирование программного обеспечения</span></b></p>

<p class=MsoNormal style='text-indent:35.4pt;line-height:normal'><b>Автоматизированное
тестирование программного обеспечения</b> (<b>Software Automation Testing</b>)
- это процесс верификации программного обеспечения, при котором основные
функции и шаги теста, такие как запуск, инициализация, выполнение, анализ и
выдача результата, выполняются автоматически при помощи инструментов для автоматизированного
тестирования.</p>

<p class=MsoNormal style='text-indent:35.4pt;line-height:normal'><b>Инструмент
для автоматизированного тестирования</b> (<b>Automation Test Tool</b>) - это
программное обеспечение, посредством которого специалист по автоматизированному
тестированию осуществляет создание, отладку, выполнение и анализ результатов
прогона тест скриптов.</p>

<p class=MsoNormal style='text-indent:35.4pt;line-height:normal'><b>Тест Скрипт</b>
(<b>Test Script</b>) - это набор инструкций, для автоматической проверки
определенной части программного обеспечения.</p>

<p class=MsoNormal style='text-indent:35.4pt;line-height:normal'><b>Тестовый
набор</b> (<b>Test Suite</b>) - это комбинация тест скриптов, для проверки
определенной части программного обеспечения, объединенной общей
функциональностью или целями, преследуемыми запуском данного набора.</p>

<p class=MsoNormal style='text-indent:35.4pt;line-height:normal'><b>Тесты для
запуска</b> (<b>Test Run</b>) - это комбинация тест скриптов или тестовых
наборов для последующего совместного запуска (последовательного или
параллельного, в зависимости от преследуемых целей и возможностей инструмента
для автоматизированного тестирования). [1]</p>

<h1>Зачем нужно автоматизировать?</h1>

<p style='text-indent:35.4pt'>С автоматизацией тестирования, как и со многими другими
узконаправленными IT - дисциплинами, связано много неверных представлений. Для
того, чтобы избежать неэффективного применения автоматизации, следует обходить
ее недостатки и максимально использовать преимущества. Далее мы перечислим и
дадим небольшое описание для основных нюансов автоматизации и дадим ответ на
основной вопрос данной статьи – когда автоматизацию все таки стоит применять.</p>

<h3>Преимущества автоматизации тестирования:</h3>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Повторяемость
     – все написанные тесты всегда будут выполняться однообразно, то есть
     исключен «человеческий фактор». Специалист по тестированию не пропустит
     тест по неосторожности и ничего не напутает в результатах.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Быстрое
     выполнение – автоматизированному скрипту не нужно сверяться с инструкциями
     и документациями, это сильно экономит время выполнения.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Меньшие
     затраты на поддержку – когда автоматические скрипты уже написаны, на их
     поддержку и анализ результатов требуется, как правило, меньшее время чем
     на проведение того же объема тестирования вручную.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Отчеты –
     автоматически рассылаемые и сохраняемые отчеты о результатах тестирования.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Выполнение
     без вмешательства – во время выполнения тестов инженер-тестировщик может
     заниматься другими полезными делами, или тесты могут выполняться в
     нерабочее время (этот метод предпочтительнее, так как нагрузка на
     локальные сети ночью снижена).</li>
</ul>

<h3>Недостатки автоматизации тестирования:</h3>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Затраты на
     поддержку – чем чаще изменяется приложение, тем они выше.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Большие
     затраты на разработку – разработка автоматизированных тестов это сложный
     процесс, так как фактически идет разработка приложения, которое тестирует
     другое приложение. В сложных автоматизированных тестах также есть
     фреймворки, утилиты, библиотеки и прочее. Естественно, все это нужно
     тестировать и отлаживать, а это требует времени.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Ищет только
     те ошибки, на которые он был написан (не ищет недостатки в дизайне формы,
     все то в чем не может заменить ручное тестирование).[2]</li>
</ul>

<h1>Что нужно автоматизировать?</h1>

<p><strong>Где лучше применять автоматизацию</strong>:</p>

<ol start=1 type=1>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Труднодоступные
     места в системе (бэкенд процессы, логирование файлов, запись в БД)</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Часто
     используемая функциональность, риски от ошибок в которой достаточно
     высоки. Автоматизировав проверку критической функциональности, можно
     гарантировать быстрое нахождение ошибок, а значит и быстрое их решение.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Рутинные
     операции, такие как переборы данных (формы с большим количеством вводимых
     полей. Автоматизировать заполнение полей различными данными и их проверку
     после сохранения)</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Валидационные
     сообщения (Автоматизировать заполнение полей не корректными данными и
     проверку на появление той или иной валидации)</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Длинные
     end-to-end сценарии</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Проверка
     данных, требующих точных математических расчетов</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Проверка
     правильности поиска данных</li>
</ol>

<p><b>Для</b> более <b>эффективного использования автоматизации тестирования</b>
лучше разработать отдельные <a
href="http://www.protesting.ru/testing/testcase.html">тест кейсы</a>
проверяющие:</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Базовые
     операции создания/чтения/изменения/удаления сущностей (так называемые CRUD
     операции - Create / Read / Update / Delete). </li>
</ul>

<p class=MsoNormal style='margin-left:36.0pt'><b>Пример</b>: создание,
удаление, просмотр и изменение данных о пользователе.</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Типовые
     сценарии использования приложения, либо отдельные действия. </li>
</ul>

<p class=MsoNormal style='margin-left:36.0pt'><b>Пример</b>: пользователь
заходит на почтовый сайт, листает письма, просматривает новые, пишет и
отправляет письмо, выходит с сайта. Это так называемый <b>end-to-end сценарий</b>,
который проверяет совокупность действий. Мы предлагаем вам использовать именно
такие сценарии, так как они позволяют вернуть систему в состояние, максимально
близкое к исходному, а значит – минимально влияющее на другие тесты.</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Интерфейсы,
     работы с файлами и другие моменты, неудобные для тестирования вручную. </li>
</ul>

<p class=MsoNormal style='margin-left:36.0pt'><b>Пример</b>: система создает
некоторый xml файл, структуру которого необходимо проверить.</p>

<p>Это и есть та функциональность, от автоматизации тестирования которой, можно
получить наибольшую отдачу.[3]</p>

<h1>Как автоматизировать?</h1>

<p style='text-indent:35.4pt'>В данном разделе рассмотрим аспекты, влияющие на <a
href="http://www.protesting.ru/automation/functional/testtool.html">выбор
инструмента автоматизации тестирования</a>.</p>

<p style='text-indent:35.4pt'><b>Во первых</b>, вы должны обратить внимание <b>насколько
хорошо инструмент для автоматизации распознает элементы управления</b> в вашем
приложении. В случае когда элементы не распознаются стоит поискать плагин, либо
соответствующий модуль. Если такового нет – от инструмента лучше отказаться.
Чем больше элементов может распознать инструмент – тем больше времени вы
сэкономите на написании и поддержке скриптов!</p>

<p style='text-indent:35.4pt'><b>Во-вторых</b>, нужно обратить внимание на то <b>сколько
времени требуется на поддержку скриптов</b> написанных с помощью выбранного
инструмента. Для этого запишите простой скрипт который выбирает пункт меню, а
потом представьте, что изменился пункт меню который необходимо выбрать. Если
для восстановления работоспособности сценария вам придется перезаписать скрипт
целиком, то инструмент не оптимален, так как реальные сценарии гораздо сложнее.
Лучше всего тот инструмент, который позволяет вам вынести название кнопки в
переменную в начале скрипта и быстро заменить ее значение. В идеале – описать меню
как класс.</p>

<p style='text-indent:35.4pt'><b>И последний момент</b> на который нужно
обратить внимание – <b>насколько удобен инструмент для написания новых скриптов</b>.
Сколько требуется на это времени, насколько можно структурировать код
(поддержка ООП), насколько код читаем, насколько удобна среда разработки для
рефакторинга (переработки кода) и т.п. [4]</p>

<h1>Выбор инструмента автоматизации тестирования</h1>

<p class=MsoNormal>Выбор инструмента зачастую <strong>зависит от объекта
тестирования и требований к тестовым </strong>сценариям, т.к. инструменты
тестирования не могут поддерживать абсолютно все технологии, используемые при
разработке приложений. То есть, выбор инструмента сводится к банальному методу
проб и ошибок. В итоге, нередко мы выбираем несколько инструментов для тестирования
функций приложения. Например, GUI мы проверяем по средствам <b>Mercury
WinRunner</b>, бэкенд процессы - используя <b>&quot;java based test tools&quot;</b>
или другие инструменты. [5]</p>

<p class=MsoNormal><span style='line-height:115%'>&nbsp;</span></p>

<p class=MsoNormal><span style='line-height:115%'>&nbsp;</span></p>

<h1>Три уровня автоматизации тестирования</h1>

<p>Условно, тестируемое приложение можно разбить на 3 уровня:</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>Unit
     Tests</strong><b> Layer</b></li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong><span
     lang=EN-US>Functional Tests</span></strong><b><span lang=EN-US> Layer
     (Non-UI)</span></b></li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>GUI
     Tests</strong><b> Layer</b></li>
</ul>

<p>Для обеспечения лучшего качества продукта, рекомендуется автоматизировать
все 3 уровня. Рассмотрим более детально стратегию автоматизации тестирования на
основе трехуровневой модели:</p>

<h3>Уровень модульного тестирования (Unit Test layer)</h3>

<p>Под автоматизированными тестами на этом уровне понимаются <a
href="http://www.protesting.ru/testing/levels/component.html">Компонентные или
Модульные тесты</a> написанные разработчиками. Тестировщикам никто не запрещает
писать такие тесты, которые будут проверять код, конечно же, если их
квалификация позволяет это. Наличие подобных тестов на ранних стадиях проекта,
а также постоянное их пополнение новыми тестами, проверяющими «баг фиксы»,
убережет проект от многих серьезных проблем.</p>

<h3>Уровень функционального тестирование (Functional Test Layer non-ui)</h3>

<p>Как правило не всю бизнес логику приложения можно протестировать через GUI
слой. Это может быть особенностью реализации, которая прячет бизнес логику от пользователей.
Именно по этой причине по договоренности с разработчиками, для команды
тестирования может быть реализован доступ напрямую к функциональному слою,
дающий возможность тестировать непосредственно бизнес логику приложения, минуя
пользовательский интерфейс.</p>

<h3>Уровень тестирования через пользовательский интерфейс (GUI Test Layer)</h3>

<p>На данном уровне есть возможность тестировать не только интерфейс
пользователя, но также и функциональность, выполняя операции вызывающую бизнес
логику приложения. С нашей точки зрения, такого рода сквозные тесты дают
больший эффект нежели просто тестирование функционального слоя, так как мы
тестируем функциональность, эмулируя действия конечного пользователя, через
графический интерфейс.[6]</p>

<p class=MsoNormal><span style='line-height:115%'>&nbsp;</span></p>

<p class=MsoNormal><span style='line-height:115%'>&nbsp;</span></p>

<p class=MsoNormal><span style='line-height:115%'>&nbsp;</span></p>

<h1>Архитектура Автоматических Тестов (Test Tools Architecture)</h1>

<p>Для удобства наложения автоматизированных тестов, на уже имеющиеся тест
кейсы, <strong>структура тест скриптов</strong> должна быть аналогична
структуре <a href="http://www.protesting.ru/testing/testcase.html">тестового
случая</a> - Precondition, Steps &amp; Post Condition.</p>

<p>Получаем правило, что каждый тест скрипт должен иметь:</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Precondition</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Steps
     (Test)</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Post
     Condition</li>
</ul>

<p>Перечислим основные функции скрипта:</p>

<ol start=1 type=1>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Precondition
     </li>
 <ul type=circle>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Инициализация
      приложения (например, открытие главной страницы, вход под тестовым
      пользователем, переход в необходимую часть приложения и подведение
      системы к состоянию пригодному для тестирования)</li>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Инициализация
      тестовых данных</li>
 </ul>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Steps </li>
 <ul type=circle>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Непосредственное
      проведение теста</li>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Занесение
      данных о результате теста, с обязательным сохранением причин провала и
      шагов, по которым проходил тест</li>
 </ul>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Post
     Condition </li>
 <ul type=circle>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Удаление,
      созданных в процессе выполнения скрипта, ненужных тестовых данных</li>
  <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Корректное
      завершение работы приложения</li>
 </ul>
</ol>

<p>Рекомендуется также создать общую библиотеку по обработке ошибок и исключительных
ситуаций. Например:</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>PreConditionException</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>TestCaseException</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>PostConditionException</li>
</ul>

<p>В итоге, воспользовавшись вышеописанными рекомендациями, у вас будет
реализована общая <b>архитектура тест скриптов</b> и сценариев.[7]</p>

<h1>Стратегия использования автоматизированных тестов</h1>

<p>Чтобы автоматизация тестирования дала нужные плоды, а именно сократила время
на тестирование ПО, предлагается следующее:</p>

<ol start=1 type=1>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Написанием
     тестов должны заниматься «специально обученные люди» - <a
     href="http://www.protesting.ru/automation/">специалисты по
     автоматизированному тестированию</a> (Software Automation Testers). После
     написания, тесты передаются команде ручного тестирования, которая уже
     осуществляет их ежедневный запуск и анализ результатов. Тем самым
     автоматизированные тесты также проходят тестирование, и в результате
     увеличивается их надежность и жизнеспособность.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Написанные
     и отлаженные тесты также могут передаваться команде разработки, для
     отладки новых версий.</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'>Команде
     разработки рекомендуется осуществлять ежедневную сборку, с прогоном всех
     написанных тестов на всех <a
     href="http://www.protesting.ru/automation/functional/autolevel.html">уровнях
     автоматизации тестирования</a>. И только после того, как новая версия
     начинает удовлетворять критериям качества, осуществлять установку новой
     версии на QA платформу.</li>
</ol>

<p>Написание и подход к автоматизации тестирования зависит от процесса
разработки приложения. Взяв за основу <a
href="http://alexeybulat.blogspot.com/2008/01/rup-project-process.html"
target="_blank">RUP (Rational Unified Process)</a>, описанный на страницах
блога&quot;ПроТестинг&quot;, могу предложить следующую процедуру, разбитую на
фазы:</p>

<ul type=disc>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>Inception
     phase</strong> – выбор инструмента автоматизации, в зависимости от
     которого решается будут ли использоваться уже готовые наработки
     (фреймворки) или же все будет написано &quot;с нуля&quot;. </li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>Elaboration
     phase</strong> – написание тестов на основную архитектуру (в дальнейшем
     эти тесты будут использоваться для приема билда – <a
     href="http://www.protesting.ru/testing/types/bvt.html">Build Verification
     Tests</a>)</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>Construction
     phase</strong> – более детальная автоматизация: критическая
     функциональность, проверка регрессий, end-to-end сценарии</li>
 <li class=MsoNormal style='text-indent:-18.0pt;line-height:normal'><strong>Transition
     phase</strong> – подготовка тестов к передаче заказчику (если это
     требуется)[8]</li>
</ul>

</div>

</body>

</html>
