<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-link:"Заголовок 1 Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
h3
	{mso-style-link:"Заголовок 3 Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{mso-style-link:"Текст примечания Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject
	{mso-style-link:"Тема примечания Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Текст выноски Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
span.1
	{mso-style-name:"Заголовок 1 Знак";
	mso-style-link:"Заголовок 1";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-link:"Заголовок 3";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.a
	{mso-style-name:"Текст примечания Знак";
	mso-style-link:"Текст примечания";}
span.a0
	{mso-style-name:"Тема примечания Знак";
	mso-style-link:"Тема примечания";
	font-weight:bold;}
span.a1
	{mso-style-name:"Текст выноски Знак";
	mso-style-link:"Текст выноски";
	font-family:"Tahoma","sans-serif";}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=RU link=blue vlink=purple>

<div class=WordSection1>

<h1 align=center style='text-align:center'><a name="_Toc284544539">Функциональное
тестировани</a>е</h1>

<h2><a name="_Toc284544540">1. Определение</a></h2>

<p class=MsoNormal>Функциональное тестирование&nbsp;— это <a
href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F"
title="Тестирование программного обеспечения"><span style='color:windowtext;
text-decoration:none'>тестирование ПО</span></a> в целях проверки реализуемости
функциональных <a
href="https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F_%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%BC%D1%83_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8E"
title="Требования к программному обеспечению"><span style='color:windowtext;
text-decoration:none'>требований</span></a>, то есть способности ПО в
определённых условиях решать задачи, нужные пользователям. Функциональные
требования определяют, что именно делает ПО, какие задачи оно решает.</p>

<p class=MsoNormal>Функциональные требования включают в себя:</p>

<p class=MsoNormal style='margin-left:71.45pt;text-indent:-18.0pt'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Функциональная
пригодность (<a
href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA"
title="Английский язык"><span style='color:windowtext;text-decoration:none'>англ.</span></a>&nbsp;suitability).</p>

<p class=MsoNormal style='margin-left:71.45pt;text-indent:-18.0pt'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Точность
(<a
href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA"
title="Английский язык"><span style='color:windowtext;text-decoration:none'>англ.</span></a>&nbsp;accuracy).</p>

<p class=MsoNormal style='margin-left:71.45pt;text-indent:-18.0pt'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Способность
к взаимодействию (<a
href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA"
title="Английский язык"><span style='color:windowtext;text-decoration:none'>англ.</span></a>&nbsp;interoperability).</p>

<p class=MsoNormal style='margin-left:71.45pt;text-indent:-18.0pt'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Соответствие
стандартам и правилам (<a
href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA"
title="Английский язык"><span style='color:windowtext;text-decoration:none'>англ.</span></a>&nbsp;compliance).</p>

<p class=MsoNormal style='margin-left:71.45pt;text-indent:-18.0pt'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Защищённость
(<a
href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA"
title="Английский язык"><span style='color:windowtext;text-decoration:none'>англ.</span></a>&nbsp;security).</p>

<p class=MsoNormal>Есть много приложений, для которых производительность и
удобство пользования некритичны. Во всяком случае, часто требования к ПО
содержат только функциональную часть. И практически не бывает требований к ПО
без функциональной части.</p>

<p class=MsoNormal>Как правило, функциональное и нефункциональное тестирование
ПО можно проводить параллельно, поэтому обычно это делается разными людьми или
командами. В большинстве источников указывается, что функциональное
тестирование - это синоним тестирования методом черного ящика.</p>

<p class=MsoNormal style='text-indent:18.0pt'><b>Преимущества функционального
тестирования</b>:</p>

<ul type=disc>
 <li class=MsoNormal style='text-align:left;text-indent:-18.0pt'>имитирует
     фактическое использование системы;</li>
</ul>

<p class=MsoNormal align=left style='text-align:left;text-indent:18.0pt'><b>Недостатки
функционального тестирования</b>:</p>

<ul type=disc>
 <li class=MsoNormal style='text-align:left;text-indent:-18.0pt'>возможность
     упущения логических ошибок в программном обеспечении;</li>
 <li class=MsoNormal style='text-align:left;text-indent:-18.0pt'>вероятность
     избыточного тестирования.</li>
</ul>

<h2><a name="_Toc284544542">3. Методы отбора тестов для тестирования</a>
черного ящика</h2>

<p class=MsoNormal>Любая программа может рассматриваться как конечный автомат,
с входными и выходными данными, набором внутренних состояний и переходов между
ними.</p>

<p class=MsoNormal>Чтобы провести полное тестирование программы, нужно
проверить правильность ее поведения при всех возможных комбинациях входных
данных и во всех возможных внутренних состояниях. Это довольно трудно сделать
из-за огромного числа комбинаций даже в простейших случаях. Поэтому на практике
отбираются только наиболее важные тесты, такой отбор можно производить
несколькими методами.</p>

<h3><a name="_Toc284544543">3.1. Тестирование сценариев использования (</a><span
lang=EN-US>use</span>-<span lang=EN-US>cases</span>)</h3>

<p class=MsoNormal>Чтобы удостовериться в правильности перехода программы между
различными внутренними состояниями, в идеале следует протестировать все
возможные переходы между каждым из состояний.</p>

<p class=MsoNormal>Чтобы уменьшить число тестов, можно проверить только те
переходы, которые имеют смысл для пользователя. <span lang=EN-US>Use</span>-<span
lang=EN-US>case</span> - это логически завершенная последовательность действий.
Например, открытие файла в <span lang=EN-US>Notepad</span> - это <span
lang=EN-US>use</span>-<span lang=EN-US>case</span>, а выбор пункта меню
&quot;Открыть файл&quot; в <span lang=EN-US>Notepad</span> - это не <span
lang=EN-US>use</span>-<span lang=EN-US>case</span>, а лишь первый шаг юз-кейса
&quot;открытие файла&quot;.</p>

<p class=MsoNormal>Тестирование сценариев является самым необходимым видом
тестирования. Программа должна выполнять операции, для которых она
предназначена. Если пользователь может выбрать пункт меню, но файл не
открывается - это очень серьезный баг. Здесь проверяется правильность перехода
программы между внутренними состояниями при выполнении определенных операций.</p>

<p class=MsoNormal><a name="_Toc284544544"><span class=3><span
style='font-size:13.0pt'>3.2. Тестирование классов эквивалентности</span></span></a>.</p>

<p class=MsoNormal>Чтобы удостовериться в правильности поведения программы при
различных входных данных, в идеале следует протестировать все возможные значения
для каждого элемента этих данных, а также все возможные сочетания входных
параметров.</p>

<p class=MsoNormal> Например, пусть мы тестируем программу для отдела кадров, в
ней есть поле &quot;Возраст соискателя&quot;. </p>

<p class=MsoNormal>Требования по возрасту у нас будут такие:</p>

<p class=MsoNormal>0-13 лет - не нанимать</p>

<p class=MsoNormal>14-17 лет - можно нанимать на неполный день</p>

<p class=MsoNormal>18-54 года - можно нанимать на полный день</p>

<p class=MsoNormal>55-99 лет - не нанимать</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Чтобы проверить все возможные разрешенные данные нам нужно
протестировать ввод чисел от 0 до 99. (Возможен ведь еще ввод отрицательных
чисел и нечисловых данных.) Так ли необходимо тестировать все числа от 0 до 99?
Программы построены на работе с диапазонами значений: </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>  <span lang=EN-US>if (age &gt;= 0 &amp;&amp; age &lt;=13)</span></p>

<p class=MsoNormal><span lang=EN-US>            hireStatus=&quot;NO&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>  if (age &gt;= 14 &amp;&amp; age &lt;=17)</span></p>

<p class=MsoNormal><span lang=EN-US>            hireStatus=&quot;PART&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>  if (age &gt;= 18 &amp;&amp; age &lt;=54)</span></p>

<p class=MsoNormal><span lang=EN-US>            hireStatus=&quot;FULL&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US>  if (age &gt;= 55 &amp;&amp; age &lt;=99)</span></p>

<p class=MsoNormal><span lang=EN-US>            hireStatus=&quot;NO&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US> </span></p>

<p class=MsoNormal>Становится очевидным, что можно протестировать одно из чисел
каждого диапазона. Например: 5, 15, 20, 60. А также граничные значения: 0, 13,
14, 17, 18, 54, 55, 99.</p>

<p class=MsoNormal>Чтобы уменьшить количество тестируемых значений,
производится </p>

<p class=MsoNormal>а) разбиение множества всех значений входной переменной на
подмножества (классы эквивалентности), а затем </p>

<p class=MsoNormal>б) тестирование одного любого значения из каждого класса.</p>

<p class=MsoNormal>Все значения из каждого подмножества должны быть
эквивалентны для наших тестов. То есть, если тест проходит успешно для одного
значения из класса эквивалентности, он должен проходить успешно для всех
остальных. И наоборот, если тест не проходит для одного значения, он не должен
проходить для всех остальных.</p>

<p class=MsoNormal>В данном случае имеем 12 классов эквивалентности (каждое из
8 граничных значений по сути является отдельным классом).</p>

<p class=MsoNormal>Чтобы проверить правильность работы программы на всех
разрешенных данных, нужно провести 12 тестов.</p>

<p class=MsoNormal>Запрещенные данные тестируются аналогично - можно выделить
классы эквивалентности &quot;дробное число от 0 до 99&quot;,
&quot;отрицательное число&quot;, &quot;число больше 99&quot;, &quot;набор
букв&quot;, &quot;пустая строка&quot; и т.д.</p>

<p class=MsoNormal>Таким образом, метод классов эквивалентности можно разделить
на три этапа:</p>

<p class=MsoNormal>1. Тестирование разрешенных значений</p>

<p class=MsoNormal>2. Тестирование граничных значений</p>

<p class=MsoNormal>3. Тестирование запрещенных значений</p>

<p class=MsoNormal>Часто в литературе второй и третий этапы называют отдельными
методами, но сути это не меняет. </p>

<p class=MsoNormal><a name="_Toc284544545"><span class=3><span
style='font-size:13.0pt'>3.3. Попарное тестирование</span></span></a>.</p>

<p class=MsoNormal>Метод классов эквивалентности применяется для тестирования
каждого входного параметра по отдельности. </p>

<p class=MsoNormal> Пусть наша программа принимает на вход десять параметров.
Баги, возникающие при определенном сочетании всех десяти параметров, довольно
редки. Вообще, взаимное влияние параметров, о котором пользователь не знает -
это баг интерфейса.</p>

<p class=MsoNormal> Чаще всего будут встречаться ситуации, в которых один
параметр влияет на один из оставшихся, т.е. самыми частыми будут баги,
возникающие при определенном сочетании двух каких-то параметров.</p>

<p class=MsoNormal>Таким образом, можно упростить себе задачу и протестировать
все возможные значения для каждой из пар параметров. Такой подход называется
попарным тестированием (<span lang=EN-US>pairwise</span><span lang=EN-US> </span><span
lang=EN-US>testing</span>).</p>

<p class=MsoNormal>Вот пример. Пусть имеется 3 двоичных входных параметра (3
чекбокса). Количество всех возможных комбинаций - 2 в степени 3 = 8 , значит,
нужно произвести 8 тестов. Давайте попробуем сэкономить, тестируя чекбоксы
попарно.</p>

<p class=MsoNormal>Выпишем все комбинации для первого и второго чекбоксов:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й 2-й</p>

<p class=MsoNormal> 0   0    </p>

<p class=MsoNormal> 0   1 </p>

<p class=MsoNormal> 1   0 </p>

<p class=MsoNormal> 1   1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Добавим третий столбец так, чтобы во втором и третьем
столбце получились все 4 двоичные комбинации. Это можно сделать разными
способами, мы сделаем так (на первый столбец можно не обращать внимания): </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й 2-й 3-й</p>

<p class=MsoNormal> 0   0   0   </p>

<p class=MsoNormal> 0   1   0</p>

<p class=MsoNormal> 1   0   1</p>

<p class=MsoNormal> 1   1   1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Итак, с помощью четырех наборов входных данных (четырех
тестов) мы протестируем две пары параметров: первый со вторым и второй с
третьим. Осталось протестировать пару &quot;первый с третьим&quot;.</p>

<p class=MsoNormal>Выпишем отдельно 1 и 3 столбцы:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й     3-й</p>

<p class=MsoNormal> 0       0   </p>

<p class=MsoNormal> 0       0</p>

<p class=MsoNormal> 1       1</p>

<p class=MsoNormal> 1       1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Как видно, мы имеем здесь две из четырех возможных
комбинаций. Комбинации &quot;01&quot; и &quot;10&quot; здесь отсутствуют, а
комбинации &quot;00&quot; и &quot;11&quot; присутствуют два раза. Ну что же,
добавим еще 2 строки (еще два теста)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й     3-й</p>

<p class=MsoNormal> 0       0   </p>

<p class=MsoNormal> 0       0</p>

<p class=MsoNormal> 1       1</p>

<p class=MsoNormal> 1       1</p>

<p class=MsoNormal> 0       1</p>

<p class=MsoNormal> 1       0</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Вернем второй столбец на его законное место:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й 2-й 3-й</p>

<p class=MsoNormal> 0   0   0    </p>

<p class=MsoNormal> 0   1   0</p>

<p class=MsoNormal> 1   0   1</p>

<p class=MsoNormal> 1   1   1</p>

<p class=MsoNormal> 0       1</p>

<p class=MsoNormal> 1       0</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Выходит, что последние два теста можно проходить при любых
значениях второго параметра. Можно дописать для определенности нули в эти
пустые места:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й 2-й 3-й</p>

<p class=MsoNormal> 0   0   0    </p>

<p class=MsoNormal> 0   1   0</p>

<p class=MsoNormal> 1   0   1</p>

<p class=MsoNormal> 1   1   1</p>

<p class=MsoNormal> 0   0   1</p>

<p class=MsoNormal> 1   0   0</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Получаем 6 тестов вместо 8 при полном переборе. </p>

<p class=MsoNormal>Можно ли сэкономить еще? Оказывается, можно.</p>

<p class=MsoNormal>Вернемся к 1 шагу:</p>

<p class=MsoNormal> 1-й 2-й</p>

<p class=MsoNormal> 0   0    </p>

<p class=MsoNormal> 0   1 </p>

<p class=MsoNormal> 1   0 </p>

<p class=MsoNormal> 1   1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Давайте допишем третий столбец другим способом, поменяв
порядок комбинаций:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> 1-й 2-й 3-й</p>

<p class=MsoNormal> 0   0   1   </p>

<p class=MsoNormal> 0   1   0</p>

<p class=MsoNormal> 1   0   0</p>

<p class=MsoNormal> 1   1   1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Все комбинации для 1 и 2, а также для 2 и 3 параметра здесь
есть. Отлично.</p>

<p class=MsoNormal>Посмотрим теперь на комбинации 1 и 3 параметра</p>

<p class=MsoNormal> 1-й     3-й</p>

<p class=MsoNormal> 0       1</p>

<p class=MsoNormal> 0       0</p>

<p class=MsoNormal> 1       0</p>

<p class=MsoNormal> 1       1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Ого! Что мы видим? Изменив порядок значений в третьем
столбце, мы одним махом убили двух зайцев: скомбинировали и 2-й с 3-м, и 1-й с
3-м параметры.</p>

<p class=MsoNormal>Итого имеем всего 4 строки, то есть 4 теста, эквивалентные
первоначальным шести: </p>

<p class=MsoNormal> 1-й 2-й 3-й</p>

<p class=MsoNormal> 0   0   1</p>

<p class=MsoNormal> 0   1   0</p>

<p class=MsoNormal> 1   0   0</p>

<p class=MsoNormal> 1   1   1</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Полный перебор всех комбинаций в третьем столбце
гарантированно даст минимальное количество тестов. Однако, судя по тому, что
алгоритмы такой минимизации разрабатываются до сих пор, полный перебор
неприемлем из-за большого времени исполнения.</p>

<p class=MsoNormal>Вот строгое определение ортогонального массива:</p>

<p class=MsoNormal>Ортогональный массив <span lang=EN-US>OA</span>(<span
lang=EN-US>N</span>,<span lang=EN-US>k</span>,<span lang=EN-US>s</span>,<span
lang=EN-US>t</span>) - это двумерный массив из <span lang=EN-US>N</span> рядов
(итераций) и <span lang=EN-US>k</span> колонок (факторов) из набора <span
lang=EN-US>S</span> (т.е. факторы могут принимать любое из <span lang=EN-US>s</span>
значений), обладающий свойством:</p>

<p class=MsoNormal>выбрав любые <span lang=EN-US>t</span> колонок (0&lt;=<span
lang=EN-US>t</span>&lt;=<span lang=EN-US>k</span>) мы получим в рядах все
комбинации сочетаний из <span lang=EN-US>s</span> по <span lang=EN-US>t</span>
(Количество повторений одинаковых комбинаций обозначают через <span lang=EN-US>&#955;</span>.
Чаще всего рассматривают массивы, где <span lang=EN-US>&#955;</span> = 1, т.е.
каждая комбинация встречается только один раз). Параметр <span lang=EN-US>t</span>
называют мощностью ортогонального массива.</p>

<p class=MsoNormal>В попарном тестировании применяется ортогональный массив
мощности 2 - это двумерный массив такой, что любые 2 колонки этого массива
содержат все возможные комбинации (пары) значений, хранящихся в массиве.</p>

<h2><a name="_Toc284544546">4. Сбор информации о программе при тестировании</a></h2>

<h3><a name="_Toc284544547">4.1. Информация о базе данных</a></h3>

<p class=MsoNormal>Если программа использует для своей работы какую-либо базу
данных, мы можем проанализировать типы полей, в которые записываются переменные
программы. А потом проанализировать ограничения, которые накладывает база
данных.</p>

<p class=MsoNormal>Например, если вводимая фамилия пользователя  записывается в
поле типа &quot;строка&quot; длиной 128 символов, мы должны: </p>

<p class=MsoNormal>1) попробовать найти фамилию длиннее, чем 128 символов -
здесь будет довольно серьезный баг, если такие фамилии существуют - человек с
такой фамилией не сможет воспользоваться нашей системой.</p>

<p class=MsoNormal>2) вне зависимости от того, существуют или нет такие
фамилии, попробовать ввести строку длиннее 128 символов - программа не должна
ломаться (должно показываться внятное сообщение об ошибке)</p>

<h3><a name="_Toc284544548">4.2. Информация о других внешних системах</a></h3>

<p class=MsoNormal>Если программа интегрируется с другими внешними системами,
помимо базы данных, можно также проанализировать ограничения таких систем.
Например, если мы тестируем почтовый <span lang=EN-US>IMAP</span>-клиент,
следует убедиться, что он корректно обрабатывает длинные пути к папкам на
сервере (чаще всего, ограничение на длину пути составляет 255 символов)</p>

<h3><a name="_Toc284544549">4.3. Информация о коде программы</a></h3>

<p class=MsoNormal>Если мы имеем доступ к коду программы, мы можем </p>

<p class=MsoNormal>а) увидеть специальные случаи, которые не попали в документ
с требованиями и которые необходимо протестировать или, напротив</p>

<p class=MsoNormal>б) увидеть, что какие-то вещи тестировать не имеет смысла. </p>

<h1 align=center style='text-align:center;text-indent:0cm'><a
name="_Toc284544551">Как протестировать неизвестную программу или наращиваемый
подход к первичному функциональному тестированию ПО.</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Первичное тестирование - это тестирование нового ПО,
проводимое в первый раз. Первичное тестирование имеет смысл совмещать с
написанием тестовой документации, потому что тестовая документация пригодится
для контроля того, что сделано и в какие сроки, а также для последующего
регрессионного тестирования этой функциональности.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Обычно требуется получить результаты тестирования как можно
раньше, а написание тестовой документации требует довольно много времени.
Поэтому имеет смысл сначала написать черновик (список тестов с временны'ми
оценками на их проведение), потом по этому черновику провести собственно
тестирование (в ходе которого черновик может корректироваться), а после выдачи
результатов тестирования уже можно написать чистовик. Эту задачу можно поручить
отдельному человеку.   </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Поскольку в ходе тестирования в черновик могут вноситься
изменения, в оценки нужно закладывать некоторый запас по времени (на запас
больше, чем в 2 раза, руководство обычно не соглашается). </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Наращиваемый подход заключается в следующем. Тестирование
полезно разбить на этапы в порядке уменьшения значимости. При нехватке времени
последние этапы можно пропустить. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Один из таких подходов приведен Луизой Тамре в книге
&quot;Введение в тестирование программного обеспечения&quot;. Основываясь на
этой книге и собственном опыте, предлагаю следующие этапы первичного
тестирования нового ПО или новой функциональности в известном ПО:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>1. Приемочное тестирование требований к ПО</p>

<p class=MsoNormal>3. Тестирование базовых сценариев</p>

<p class=MsoNormal>4. Анализ тенденций</p>

<p class=MsoNormal>5. Поэлементное тестирование входных данных (тестирование
каждого элемента данных в отдельности на всех разрешенных классах эквивалентности) 
</p>

<p class=MsoNormal>6. Комбинирование входных данных (тестирование комбинаций
разрешенных значений для нескольких элементов данных)</p>

<p class=MsoNormal>7. Тестирование граничных значений</p>

<p class=MsoNormal>8. Тестирование ошибочных данных</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc284544552">1. Приемочное тестирование требований</a> </h2>

<p class=MsoNormal>Приемочное тестирование - это минимально необходимое. Можно
придумать множество требований к требования. С точки зрения автора, <span
lang=EN-US>QA</span> должно обращать внимание в первую очередь на </p>

<p class=MsoNormal>1. наличие</p>

<p class=MsoNormal>2. непротиворечивость </p>

<p class=MsoNormal>3. проверяемость</p>

<p class=MsoNormal>4. полноту системы операций (<span lang=EN-US>create</span>,
<span lang=EN-US>read</span>, <span lang=EN-US>update</span>, <span lang=EN-US>delete</span>).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>В требованиях должны присутствовать эти операции над
объектами каждого типа из доступных в пользовательском интерфейсе.</p>

<p class=MsoNormal>Другие требования должны проверяться другими людьми.</p>

<p class=MsoNormal>Актуальность должна проверяться людьми, непосредственно
контактирующими с заказчиком и бизнес-индустрией, выполнимость -
разработчиками.</p>

<p class=MsoNormal>Если документ с требованиями не прошел приемочное
тестирование и исправлять его никто не будет, тогда требованиями к ПО будет
фактически являться тестовая документация, которую мы напишем.</p>

<h2><a name="_Toc284544554">3. Тестирование базовых сценариев</a></h2>

<p class=MsoNormal>На этом этапе нужно проверить все базовые сценарии,
описанные в требованиях, при типичных или дефолтных настройках. Если
пользоваться моделью конечного автомата в виде графа, таким образом мы проверим
наиболее важные пути в графе.</p>

<p class=MsoNormal>Кроме того, мы должны протестировать операции <span
lang=EN-US>CRUD</span> над всеми объектами программы (или ее части, если мы
тестируем новую функциональность для существующего ПО), с типичными или
дефолтными настройками.</p>

<h2><a name="_Toc284544556">5. Поэлементное тестирование входных данных</a></h2>

<p class=MsoNormal>5.1. Определить элементы входных данных (все поля ввода) </p>

<p class=MsoNormal>5.2. Определить классы эквивалентности для каждого элемента
данных, и выбрать классы, соответствующие валидным значениям. </p>

<p class=MsoNormal>5.3. Протестировать программу для каждого элемента в
отдельности, в каждом из разрешенных состояний.  </p>

<p class=MsoNormal>Этот этап позволяет убедиться, что каждое разрешенное
состояние каждого элемента тестируется хотя бы один раз. </p>

<p class=MsoNormal>Например, пусть при создании какого-нибудь объекта в
интерфейсе программы имеется 5 чекбоксов. Нужно проверить что каждый чекбокс в
отдельности работает, т.е. провести 10 тестов.</p>

<p class=MsoNormal>Пользовательские объекты бывают связаны между собой довольно
сложным образом. При тестировании следует помнить о проверке вложенных или иным
образом связанных объектов. Например, у одного пользовательского аккаунта в
системе управления хостингом может быть несколько подписок с различными
сервисами, в том числе с почтовыми ящиками. Пусть также определены операции
удаления ящиков, подписок и аккаунта. Соответственно, при удалении подписок и
аккаунта следует протестировать, что почтовые ящики и связанные с ними сервисы
были удалены. </p>

<p class=MsoNormal>На этом этапе возникают тем большие сложности, чем более
сложна тестируемая программа. Для улучшения понимания целесообразно составить
схему пользовательских объектов и связей между ними. </p>

<h2><a name="_Toc284544557">6. Комбинирование входных данных.</a></h2>

<p class=MsoNormal>Определить и протестировать комбинации разрешенных значений
для нескольких элементов данных. </p>

<p class=MsoNormal>Все комбинации проверить невозможно, нужно выбрать самые
распространенные и потенциально влияющие друг на друга.   </p>

<p class=MsoNormal>Сюда же следует отнести тестирование при разных глобальных
настройках, которые тоже следует считать входными параметрами. </p>

<h2><a name="_Toc284544558">7. Тестирование граничных значений.</a></h2>

<p class=MsoNormal>Для каждой границы каждого элемента данных нужно
протестировать 2 значения </p>

<p class=MsoNormal>Можно выделить 2 границы:</p>

<p class=MsoNormal>7.1. Границы диапазона данных</p>

<p class=MsoNormal>7.2. Границы размера поля (длина строки)</p>

<h2><a name="_Toc284544559">8. Тестирование невалидных данных (не имеющих
смысла)</a></h2>

<p class=MsoNormal>8.1. Пустая строка </p>

<p class=MsoNormal>8.2. Неверные числовые данные (напр., отрицательные или
дробные, там где это не имеет смысла)</p>

<p class=MsoNormal>8.3. Недопустимый формат (например, для даты или телефона)</p>

<p class=MsoNormal>8.4. Недопустимые печатные символы (служебные или
национальные символы там, где это не имеет смысла) </p>

<p class=MsoNormal>8.5. Недопустимые непечатные символы (перевод строки или
табуляция там, где это не имеет смысла)</p>

<p class=MsoNormal>&nbsp;</p>

<h2>Пример</h2>

<p class=MsoNormal>В качестве примера рассмотрим калькулятор с возможностью
основных операций.</p>

<p class=MsoNormal align=center style='text-align:center;text-indent:0cm'><img
border=0 width=154 height=233 id="irc_mi" src="teory3.files/image001.gif"></p>

<p class=MsoNormal>3. Базовые сценарии (операции <span lang=EN-US>CRUD</span>)</p>

<p class=MsoNormal>В данном случае имеется возможность создание новой записи,
редактирование и удаление. Получение информации не возможно.</p>

<p class=MsoNormal>4. Поэлементное тестирование входных данных</p>

<p class=MsoNormal>4.1. Имеется поле ввода</p>

<p class=MsoNormal>4.2. Классы эквивалентности для валидных значений:</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>Операторы:</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Сложение</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Вычитание</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Умножение</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Деление</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Операнды:</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Простые</p>

<p class=MsoNormal style='margin-left:53.45pt;text-indent:-18.0pt'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>С
плавающей запятой</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Всего получается 6 классов эквивалентности.</p>

<p class=MsoNormal>В дополнение имеется возможность очищать форму.</p>

<p class=MsoNormal>Так как от перемены зависимость от типа операнда не имеет
значения, то в одном тесте можно проверять сразу ввод первого и второго типа
операнда.</p>

<p class=MsoNormal>Так как имеется кнопка очищения формы, то ее необходимо
проверить, но так как ее придется использовать для подготовки программы при
переходе от первого ко второму тесту, то ее отнесем к первому тесту.</p>

<p class=MsoNormal>Итого получается 5 тестов.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>6. Комбинирование входных данных.</p>

<p class=MsoNormal>Ввод простого числа и числа с плавающей запятой.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>7. Тестирование граничных значений</p>

<p class=MsoNormal>Получение значения выходящего за рамки максимального числа,
которое можно ввести в поле (максимум 10 символов, умножаем число состоящее из
10 символов на 10)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>8. Тестирование невалидных данных</p>

<p class=MsoNormal>8.1 Ввод второй плавающей запятой</p>

<p class=MsoNormal>8.2 Деление на ноль</p>

<p class=MsoNormal>8.3 Вставка недопустимых символов из буфера обмена</p>

<p class=MsoNormal>8.4 действие с пустым полем.</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
